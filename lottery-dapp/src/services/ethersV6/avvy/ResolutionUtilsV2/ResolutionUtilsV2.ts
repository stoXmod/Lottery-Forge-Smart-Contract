/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../types/common';

export interface ResolutionUtilsV2Interface extends Interface {
  getFunction(
    nameOrSignature: 'resolveStandard' | 'reverseResolveEVMToName'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'resolveStandard',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'reverseResolveEVMToName',
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: 'resolveStandard',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'reverseResolveEVMToName',
    data: BytesLike
  ): Result;
}

export interface ResolutionUtilsV2 extends BaseContract {
  connect(runner?: ContractRunner | null): ResolutionUtilsV2;
  waitForDeployment(): Promise<this>;

  interface: ResolutionUtilsV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  resolveStandard: TypedContractMethod<
    [name: string, key: BigNumberish],
    [string],
    'view'
  >;

  reverseResolveEVMToName: TypedContractMethod<
    [addy: AddressLike],
    [string],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'resolveStandard'
  ): TypedContractMethod<[name: string, key: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'reverseResolveEVMToName'
  ): TypedContractMethod<[addy: AddressLike], [string], 'view'>;

  filters: {};
}
